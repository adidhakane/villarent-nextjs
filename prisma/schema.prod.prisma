// Production PostgreSQL Schema
// This file is used when NODE_ENV=production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role     @default(GUEST)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  villas        Villa[]
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  ADMIN
  VILLA_OWNER
  GUEST
}

model Villa {
  id             String   @id @default(cuid())
  name           String
  description    String
  location       String
  address        String
  maxGuests      Int
  bedrooms       Int
  bathrooms      Int
  amenities      String[] // PostgreSQL native arrays
  images         String[] // PostgreSQL native arrays
  pricePerNight  Float
  ownerId        String
  isApproved     Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings       Booking[]
  unavailableDates UnavailableDate[]

  @@map("villas")
}

model Booking {
  id          String   @id @default(cuid())
  villaId     String
  guestId     String
  guestName   String
  guestEmail  String
  guestPhone  String
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalAmount Float
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  villa       Villa    @relation(fields: [villaId], references: [id], onDelete: Cascade)
  guest       User     @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model UnavailableDate {
  id      String   @id @default(cuid())
  villaId String
  date    DateTime
  reason  String?

  // Relations
  villa   Villa    @relation(fields: [villaId], references: [id], onDelete: Cascade)

  @@map("unavailable_dates")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
